CREATE OR REPLACE FUNCTION apply_effect(TRAINID INTEGER) RETURNS INTEGER AS 
$$
DECLARE
    VICTIMID INTEGER;
	APPLIER INTEGER;
	CHANCE SMALLINT;
BEGIN
	CHANCE = (SELECT RANDOM() * 10);
    VICTIMID = (SELECT VICTIM FROM TRAINING WHERE TRAINING.TRAIN_ID = TRAINID);
	IF (((SELECT ALIVE FROM HUMAN WHERE PERSON_ID = VICTIMID) = FALSE) OR ((SELECT EFFECT FROM HUMAN WHERE PERSON_ID = VICTIMID) IS NOT NULL)) THEN
		RETURN 0;
	END IF;
	IF (CHANCE < 8 OR (SELECT SIDEKICK FROM TRAINING WHERE TRAINING.TRAIN_ID = TRAINID) IS NULL) THEN
		APPLIER = (SELECT LEAD_MAGE FROM TRAINING WHERE TRAINING.TRAIN_ID = TRAINID);
	ELSE 
		APPLIER = (SELECT SIDEKICK FROM TRAINING WHERE TRAINING.TRAIN_ID = TRAINID);
	END IF;
    UPDATE HUMAN 
    SET EFFECT = (SELECT DESCRIPTION FROM SMOKE JOIN MAGE ON MAGE.SMOKE_ID = SMOKE.SMOKE_ID WHERE MAGE_ID = APPLIER),
        EFFECT_FROM = APPLIER
    WHERE PERSON_ID = VICTIMID;
	IF (SELECT POWER_LVL FROM MAGE WHERE MAGE_ID=APPLIER) - CHANCE >= 90 THEN 
		UPDATE HUMAN 
		SET ALIVE = FALSE
		WHERE PERSON_ID = VICTIMID;
	END IF;
	RETURN VICTIMID;
END;
$$
    LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION remove_effect(HUMANID INTEGER, MAGEID INTEGER) RETURNS INTEGER AS 
$$
DECLARE
    ABIL VARCHAR(25);
BEGIN
	IF(((SELECT EFFECT FROM HUMAN WHERE PERSON_ID = HUMANID) IS NULL)) THEN
		RETURN 2;
	END IF;
    ABIL = (SELECT ABILITY FROM SMOKE JOIN MAGE ON MAGE.SMOKE_ID = SMOKE.SMOKE_ID WHERE MAGE_ID = MAGEID);
    IF ((ABIL = 'Healing' OR ABIL = 'Dispelling') AND (SELECT ALIVE FROM MAGE WHERE MAGE_ID = MAGEID)) THEN
        UPDATE HUMAN
        SET EFFECT = NULL,
            EFFECT_FROM = NULL
        WHERE PERSON_ID = HUMANID;
		UPDATE MAGE
        SET MONEY = MONEY + 250
        WHERE MAGE_ID = MAGEID;
		RETURN 0;
	ELSE
		RETURN 1;
    END IF;
END;
$$
    LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION revive_human(HUMANID INTEGER, MAGEID INTEGER) RETURNS INTEGER AS 
$$
DECLARE
    ABIL VARCHAR(25);
BEGIN
	IF (SELECT ALIVE FROM HUMAN WHERE PERSON_ID = HUMANID) THEN
		RETURN 2;
	END IF;
    ABIL = (SELECT ABILITY FROM SMOKE JOIN MAGE ON MAGE.SMOKE_ID = SMOKE.SMOKE_ID WHERE MAGE_ID = MAGEID);
    IF (ABIL = 'Revival' AND (SELECT ALIVE FROM MAGE WHERE MAGE_ID = MAGEID)) THEN
        UPDATE HUMAN
        SET ALIVE = TRUE
        WHERE PERSON_ID = HUMANID;
		UPDATE MAGE
        SET MONEY = MONEY + 500
        WHERE MAGE_ID = MAGEID;
	ELSE RETURN 1;
    END IF;
	RETURN 0;
END;
$$
    LANGUAGE PLPGSQL;	
	
CREATE OR REPLACE FUNCTION revive_mage(MAGEID INTEGER, REVMAGEID INTEGER) RETURNS INTEGER AS 
$$
DECLARE
    ABIL VARCHAR(25);
BEGIN
	IF (SELECT ALIVE FROM MAGE WHERE MAGE_ID = MAGEID) THEN
		RETURN 3;
	END IF;
    ABIL = (SELECT ABILITY FROM SMOKE JOIN MAGE ON MAGE.SMOKE_ID = SMOKE.SMOKE_ID WHERE MAGE_ID = REVMAGEID);
	IF ((SELECT MONEY FROM MAGE WHERE MAGE_ID = MAGEID) < 5000) THEN
		RETURN 2;
	END IF;
    IF (ABIL = 'Revival' AND (SELECT ALIVE FROM MAGE WHERE MAGE_ID = REVMAGEID)) THEN
        UPDATE MAGE
        SET ALIVE = TRUE
        WHERE MAGE_ID = MAGEID AND MAGE_ID != REVMAGEID;
		UPDATE MAGE
        SET MONEY = MONEY + 5000
        WHERE MAGE_ID = REVMAGEID;
		UPDATE MAGE
        SET MONEY = MONEY - 5000
        WHERE MAGE_ID = MAGEID;
	ELSE RETURN 1;
    END IF;
	RETURN 0;
END;
$$
    LANGUAGE PLPGSQL;	
	
CREATE OR REPLACE FUNCTION do_trade(SELLER INTEGER, BUYER INTEGER, SELL_SMOKE BOOLEAN, DRUG_FOR_SALE INTEGER) RETURNS INTEGER AS
$$
DECLARE
    BUYER_BALANCE INTEGER;
    SELLER_BALANCE INTEGER;
	SMOKE_FOR_SALE SMALLINT;
	SMOKE_PRICE INTEGER;
	DRUG_PRICE INTEGER;
    PRICE INTEGER;
    TRADEID INTEGER;
	SEC DECIMAL;
	NEW_POWER SMALLINT;
BEGIN
	IF (SELL_SMOKE is FALSE AND DRUG_FOR_SALE IS NULL) THEN
		RETURN 2;
	END IF;
	IF (SELL_SMOKE IS TRUE) THEN
		SMOKE_FOR_SALE = (SELECT SMOKE_ID FROM MAGE WHERE MAGE.MAGE_ID = SELLER);
		SMOKE_PRICE = (SELECT COST FROM SMOKE WHERE SMOKE_ID = SMOKE_FOR_SALE);
	ELSE
		SMOKE_PRICE = 0;
	END IF;
	IF NOT(DRUG_FOR_SALE IS NULL) THEN
		DRUG_PRICE = (SELECT COST FROM DRUG WHERE DRUG_ID = DRUG_FOR_SALE);
		NEW_POWER = (SELECT POWER_MULT FROM DRUG WHERE DRUG_ID = DRUG_FOR_SALE) * (SELECT POWER_LVL FROM MAGE WHERE MAGE_ID = BUYER);
		IF (NEW_POWER > 100) THEN
			NEW_POWER = 100;
		END IF;
		SEC = (SELECT SIDE_EFFECT_CHANCE FROM DRUG WHERE DRUG_ID = DRUG_FOR_SALE);
	ELSE
		DRUG_PRICE = 0;
		NEW_POWER = (SELECT POWER_LVL FROM MAGE WHERE MAGE_ID = BUYER);
		SEC = (SELECT SIDE_EFFECT_CHANCE FROM MAGE WHERE MAGE_ID = BUYER);
	END IF;
	
    PRICE = SMOKE_PRICE + DRUG_PRICE;
    SELLER_BALANCE = (SELECT MONEY FROM MAGE WHERE MAGE_ID = SELLER);
    BUYER_BALANCE = (SELECT MONEY FROM MAGE WHERE MAGE_ID = BUYER);
    IF (BUYER_BALANCE >= PRICE) THEN

        INSERT INTO TRADE (SMOKE_ID, DRUG_ID) VALUES (SMOKE_FOR_SALE, DRUG_FOR_SALE);
        
        TRADEID = (SELECT TRADE_ID FROM TRADE ORDER BY TRADE_ID DESC LIMIT 1);

        INSERT INTO TRADE_MAGE (SELLER_ID, BUYER_ID, TRADE_ID) VALUES (SELLER, BUYER, TRADEID);
        UPDATE MAGE
        SET MONEY = BUYER_BALANCE - PRICE,
			SIDE_EFFECT_CHANCE = SEC,
			POWER_LVL = NEW_POWER
        WHERE MAGE_ID = BUYER;
    
        UPDATE MAGE
        SET MONEY = SELLER_BALANCE + PRICE
        WHERE MAGE_ID = SELLER;
	ELSE 
		RETURN 1;	
    END IF;
	RETURN 0;
END;
$$
    LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION demon_test(MAGEID INTEGER, NEW_NAME VARCHAR(25)) RETURNS VOID AS
$$
DECLARE
    CHANCE INTEGER;
    NEW_DEVIL SMALLINT;
	NEW_LOCALE SMALLINT;
	
BEGIN
	UPDATE MAGE SET IN_TEST = TRUE WHERE MAGE_ID = MAGEID;
    CHANCE = (SELECT RANDOM() * 10) + (SELECT POWER_LVL FROM MAGE WHERE MAGE_ID = MAGEID);
    IF (CHANCE > 90) THEN
        INSERT INTO DEVIL(PREV_MAGE, NAME) VALUES (MAGEID, NEW_NAME);
        NEW_DEVIL = (SELECT DEVIL_ID FROM DEVIL ORDER BY DEVIL_ID DESC LIMIT 1);
        INSERT INTO TEST(MAGE_ID, DEVIL_ID, RESULT) VALUES (MAGEID, NEW_DEVIL, TRUE);
		NEW_LOCALE = (SELECT LOCALE_ID FROM LOCATION WHERE LOC_NAME = 'Hell');
		UPDATE MAGE SET LOCALE_ID = NEW_LOCALE WHERE MAGE_ID = MAGEID;
    ELSE 
        UPDATE MAGE SET ALIVE = FALSE WHERE MAGE_ID = MAGEID;
		INSERT INTO TEST(MAGE_ID, DEVIL_ID, RESULT) VALUES (MAGEID, NEW_DEVIL, FALSE);
    END IF;
END;
$$
    LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION count_residents(LOC INTEGER) RETURNS VOID AS
$$
DECLARE
	RESIDENTS INTEGER;
BEGIN
	RESIDENTS = (SELECT COUNT(MAGE_ID) FROM MAGE WHERE MAGE.LOCALE_ID = LOC) +
				(SELECT COUNT(PERSON_ID) FROM HUMAN WHERE HUMAN.LOCALE_ID = LOC and HUMAN.ALIVE = true) +
				(SELECT COUNT(DEVIL_ID) FROM DEVIL WHERE DEVIL.LOCALE_ID = LOC);
	UPDATE LOCATION SET POPULATION = RESIDENTS WHERE LOCALE_ID = LOC;
END;
$$
    LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION mage_relocate(MAGEID INTEGER) RETURNS VOID AS
$$
DECLARE
    OLD_LOC SMALLINT;
	NEW_LOC SMALLINT;
	NEW_POWER SMALLINT;
BEGIN
    IF ((SELECT ALIVE FROM MAGE WHERE MAGE_ID = MAGEID) AND ((SELECT POWER_LVL FROM MAGE WHERE MAGE_ID = MAGEID) > 2)) THEN
        OLD_LOC = (SELECT LOCALE_ID FROM MAGE WHERE MAGE_ID = MAGEID);
		IF OLD_LOC = 2 THEN
			NEW_LOC = 1;
		END IF;
		IF OLD_LOC = 1 THEN
			NEW_LOC = 2;
		END IF;
		NEW_POWER = (SELECT POWER_LVL FROM MAGE WHERE MAGE_ID = MAGEID) - 2;
		UPDATE MAGE SET LOCALE_ID = NEW_LOC, POWER_LVL = NEW_POWER WHERE MAGE_ID = MAGEID;
	ELSE RAISE EXCEPTION 'The mage cannot relocate.';
	END IF;
END;
$$ 
LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION get_purchases(MAGEID integer)
    RETURNS TABLE (
        tradeid INTEGER,
        buyer_name VARCHAR(25),
        seller_name VARCHAR(25),
		seller_id INTEGER,
        smoke_ab VARCHAR(20),
		drug_name VARCHAR(20)
    ) AS
$$
BEGIN
	RETURN QUERY
		SELECT TRADE.TRADE_ID, M.NAME, MA.NAME as sell_name, TM.SELLER_ID, SMOKE.ABILITY, DRUG.NAME FROM TRADE_MAGE TM
		LEFT JOIN MAGE M ON TM.BUYER_ID = M.MAGE_ID LEFT JOIN TRADE using(TRADE_ID) 
		LEFT JOIN SMOKE ON SMOKE.SMOKE_ID=TRADE.SMOKE_ID LEFT JOIN DRUG using(DRUG_ID)
		LEFT JOIN MAGE MA ON TM.SELLER_ID = MA.MAGE_ID WHERE TM.BUYER_ID = MAGEID;
		
    END;
    $$ LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION get_trainings()
    RETURNS TABLE (
        train_id INTEGER,
        lead_mage VARCHAR(25),
        sidekick VARCHAR(25),
		victim VARCHAR(25),
		lm_id INTEGER,
		sk_id INTEGER,
		v_id INTEGER,
		res text
    ) AS
$$
BEGIN
	RETURN QUERY
		SELECT T.TRAIN_ID, M.NAME AS LEAD_N, MA.NAME AS SK_NAME, H.NAME, T.LEAD_MAGE, T.SIDEKICK, T.VICTIM, T.RESULT FROM TRAINING T
		LEFT JOIN MAGE M ON T.LEAD_MAGE = M.MAGE_ID LEFT JOIN HUMAN H ON T.VICTIM = H.PERSON_ID
		LEFT JOIN MAGE MA ON  T.SIDEKICK = MA.MAGE_ID;
		
    END;
    $$ LANGUAGE PLPGSQL;
	
	CREATE OR REPLACE FUNCTION get_test_data()
    RETURNS TABLE (
		mage_id INTEGER,
		devil_id SMALLINT,
        mage_name VARCHAR(25),
		new_devil VARCHAR(25),
		res boolean
    ) AS
$$
BEGIN
	RETURN QUERY
		SELECT T.MAGE_ID, T.DEVIL_ID, M.NAME, D.NAME, T.RESULT FROM TEST T LEFT JOIN MAGE M USING(MAGE_ID) LEFT JOIN DEVIL D USING(DEVIL_ID);
    END;
    $$ LANGUAGE PLPGSQL;

-------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION mage_in_train_func() RETURNS TRIGGER AS
$$
DECLARE
    IS_IN_TRAINING INTEGER;
BEGIN
    IS_IN_TRAINING = (SELECT COUNT(SIDEKICK) FROM TRAINING WHERE SIDEKICK = NEW.EFFECT_FROM GROUP BY SIDEKICK) 
                    + (SELECT COUNT(LEAD_MAGE) FROM TRAINING WHERE LEAD_MAGE = NEW.EFFECT_FROM GROUP BY LEAD_MAGE);
    IF (IS_IN_TRAINING = 0) THEN 
        RAISE EXCEPTION 'No mages were involed in the effect casting.';
		RETURN NULL;
    END IF;
	RETURN NEW;
END;
$$
    LANGUAGE PLPGSQL;

CREATE TRIGGER IS_MAGE_IN_THIS_TRAINING
    BEFORE UPDATE OF EFFECT
    ON HUMAN
	FOR EACH ROW
EXECUTE PROCEDURE mage_in_train_func();


CREATE OR REPLACE FUNCTION mage_dead() RETURNS TRIGGER AS
$$
DECLARE
	NEW_LOC SMALLINT;
BEGIN
    IF (NOT(SELECT ALIVE FROM MAGE WHERE ALIVE = FALSE AND OLD.ALIVE = TRUE LIMIT 1)) THEN
		NEW_LOC = (SELECT LOCALE_ID FROM LOCATION WHERE LOC_NAME = 'Hell');
		UPDATE MAGE SET LOCALE_ID = NEW_LOC WHERE ALIVE = FALSE AND OLD.ALIVE = TRUE;
		RETURN NEW;
	END IF;
	IF ((SELECT ALIVE FROM MAGE WHERE ALIVE = TRUE AND OLD.ALIVE = FALSE LIMIT 1)) THEN
		NEW_LOC = (SELECT LOCALE_ID FROM LOCATION WHERE LOC_NAME = 'Mage Realm');
		UPDATE MAGE SET LOCALE_ID = NEW_LOC WHERE ALIVE = TRUE AND OLD.ALIVE = FALSE;
		RETURN NEW;
    END IF;
	RETURN NULL;
END;
$$
    LANGUAGE PLPGSQL;

CREATE TRIGGER MAGE_DEAD_TRIGGER
    AFTER UPDATE OF ALIVE
    ON MAGE
	FOR EACH ROW
EXECUTE PROCEDURE mage_dead();

CREATE OR REPLACE FUNCTION mage_relocated() RETURNS TRIGGER AS
$$
DECLARE
	OLD_LOC SMALLINT;
	NEW_LOC SMALLINT;
BEGIN
	OLD_LOC = (SELECT OLD.LOCALE_ID FROM MAGE WHERE LOCALE_ID != OLD.LOCALE_ID LIMIT 1);
	NEW_LOC = (SELECT NEW.LOCALE_ID FROM MAGE WHERE LOCALE_ID != OLD.LOCALE_ID LIMIT 1);
	UPDATE LOCATION SET POPULATION = POPULATION - 1 WHERE LOCALE_ID = OLD_LOC;
	UPDATE LOCATION SET POPULATION = POPULATION + 1 WHERE LOCALE_ID = NEW_LOC;
	RETURN NULL;
END;
$$
    LANGUAGE PLPGSQL;

CREATE TRIGGER MAGE_RELOC_TRIGGER
    AFTER UPDATE OF LOCALE_ID
    ON MAGE
	FOR EACH ROW
EXECUTE PROCEDURE mage_relocated();

CREATE OR REPLACE FUNCTION human_dead() RETURNS TRIGGER AS
$$
DECLARE
    OLD_LOC SMALLINT;
BEGIN
    IF (NOT(SELECT ALIVE FROM HUMAN WHERE ALIVE = FALSE AND OLD.ALIVE = TRUE LIMIT 1)) THEN
        OLD_LOC = (SELECT LOCALE_ID FROM HUMAN WHERE ALIVE = FALSE AND OLD.ALIVE = TRUE LIMIT 1);
		UPDATE LOCATION SET POPULATION = POPULATION - 1 WHERE LOCALE_ID = OLD_LOC;
		RETURN NEW;
    END IF;
	IF ((SELECT ALIVE FROM HUMAN WHERE ALIVE = TRUE AND OLD.ALIVE = FALSE LIMIT 1)) THEN
        OLD_LOC = (SELECT LOCALE_ID FROM HUMAN WHERE ALIVE = TRUE AND OLD.ALIVE = FALSE LIMIT 1);
		UPDATE LOCATION SET POPULATION = POPULATION + 1 WHERE LOCALE_ID = OLD_LOC;
		RETURN NEW;
    END IF;
	RETURN NULL;
END;
$$
    LANGUAGE PLPGSQL;

CREATE TRIGGER HUMAN_DEAD_TRIGGER
    AFTER UPDATE OF ALIVE
    ON HUMAN
	FOR EACH ROW
EXECUTE PROCEDURE human_dead();
