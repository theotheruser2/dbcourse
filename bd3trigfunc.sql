CREATE OR REPLACE FUNCTION apply_effect(TRAINID INTEGER) RETURNS VOID AS 
$$
DECLARE
    VICTIMID INTEGER;
	APPLIER INTEGER;
	CHANCE SMALLINT;
BEGIN
	CHANCE = (SELECT RANDOM() * 10);
    VICTIMID = (SELECT VICTIM FROM TRAINING WHERE TRAINING.TRAIN_ID = TRAINID);
	IF (CHANCE < 8) THEN
		APPLIER = (SELECT LEAD_MAGE FROM TRAINING WHERE TRAINING.TRAIN_ID = TRAINID);
	ELSE 
		APPLIER = (SELECT SIDEKICK FROM TRAINING WHERE TRAINING.TRAIN_ID = TRAINID);
	END IF;
    UPDATE HUMAN 
    SET EFFECT = (SELECT DESCRIPTION FROM SMOKE JOIN MAGE ON MAGE.SMOKE_ID = SMOKE.SMOKE_ID WHERE MAGE_ID = APPLIER),
        EFFECT_FROM = APPLIER
    WHERE PERSON_ID = VICTIMID;
END;
$$
    LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION remove_effect(HUMANID INTEGER, MAGEID INTEGER) RETURNS VOID AS 
$$
DECLARE
    ABIL VARCHAR(25);
BEGIN
    ABIL = (SELECT ABILITY FROM SMOKE JOIN MAGE ON MAGE.SMOKE_ID = SMOKE.SMOKE_ID WHERE MAGE_ID = MAGEID);
    IF (ABIL = 'Healing') THEN
        UPDATE HUMAN
        SET EFFECT = NULL,
            EFFECT_FROM = NULL
        WHERE PERSON_ID = HUMANID;
    END IF;
END;
$$
    LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION revive_human(HUMANID INTEGER, MAGEID INTEGER) RETURNS VOID AS 
$$
DECLARE
    ABIL VARCHAR(25);
BEGIN
    ABIL = (SELECT ABILITY FROM SMOKE JOIN MAGE ON MAGE.SMOKE_ID = SMOKE.SMOKE_ID WHERE MAGE_ID = MAGEID);
    IF (ABIL = 'Revival') THEN
        UPDATE HUMAN
        SET ALIVE = TRUE
        WHERE PERSON_ID = HUMANID;
	ELSE RAISE EXCEPTION 'The mage cannot revive.';
    END IF;
END;
$$
    LANGUAGE PLPGSQL;	
	
CREATE OR REPLACE FUNCTION revive_mage(MAGEID INTEGER, REVMAGEID INTEGER) RETURNS VOID AS 
$$
DECLARE
    ABIL VARCHAR(25);
BEGIN
    ABIL = (SELECT ABILITY FROM SMOKE JOIN MAGE ON MAGE.SMOKE_ID = SMOKE.SMOKE_ID WHERE MAGE_ID = REVMAGEID);
    IF (ABIL = 'Revival') THEN
        UPDATE MAGE
        SET ALIVE = TRUE
        WHERE MAGE_ID = MAGEID AND MAGE_ID != REVMAGEID;
	ELSE RAISE EXCEPTION 'The mage cannot revive.';
    END IF;
END;
$$
    LANGUAGE PLPGSQL;	
	
CREATE OR REPLACE FUNCTION do_trade(SELLER INTEGER, BUYER INTEGER, SMOKE_FOR_SALE INTEGER, DRUG_FOR_SALE INTEGER) RETURNS VOID AS
$$
DECLARE
    BUYER_BALANCE INTEGER;
    SELLER_BALANCE INTEGER;
    PRICE INTEGER;
    TRADEID INTEGER;
	NEW_POWER SMALLINT;
BEGIN
    PRICE = (SELECT COST FROM SMOKE WHERE SMOKE_ID = SMOKE_FOR_SALE) + (SELECT COST FROM DRUG WHERE DRUG_ID = DRUG_FOR_SALE);
    SELLER_BALANCE = (SELECT MONEY FROM MAGE WHERE MAGE_ID = SELLER);
    BUYER_BALANCE = (SELECT MONEY FROM MAGE WHERE MAGE_ID = BUYER);
    IF (BUYER_BALANCE >= PRICE) THEN

        INSERT INTO TRADE (SMOKE_ID, DRUG_ID) VALUES (SMOKE_FOR_SALE, DRUG_FOR_SALE);
        
        TRADEID = (SELECT TRADE_ID FROM TRADE ORDER BY TRADE_ID DESC LIMIT 1);

        INSERT INTO TRADE_MAGE (SELLER_ID, BUYER_ID, TRADE_ID) VALUES (SELLER, BUYER, TRADEID);
        NEW_POWER = (SELECT POWER_MULT FROM DRUG WHERE DRUG_ID = DRUG_FOR_SALE) * (SELECT POWER_LVL FROM MAGE WHERE MAGE_ID = BUYER);
		IF (NEW_POWER > 100) THEN
			NEW_POWER = 100;
		END IF;
        UPDATE MAGE
        SET MONEY = BUYER_BALANCE - PRICE,
			SIDE_EFFECT_CHANCE = (SELECT SIDE_EFFECT_CHANCE FROM DRUG WHERE DRUG_ID = DRUG_FOR_SALE),
			POWER_LVL = NEW_POWER
        WHERE MAGE_ID = BUYER;
    
        UPDATE MAGE
        SET MONEY = SELLER_BALANCE + PRICE
        WHERE MAGE_ID = SELLER;
		
    END IF;
END;
$$
    LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION demon_test(MAGEID INTEGER, NEW_NAME VARCHAR(25)) RETURNS VOID AS
$$
DECLARE
    CHANCE INTEGER;
    NEW_DEVIL SMALLINT;
	NEW_LOCALE SMALLINT;
-- 10 ВЕРХНЯЯ ГРАНИЦА, 1 НИЖНЯЯ
BEGIN
	UPDATE MAGE SET IN_TEST = TRUE WHERE MAGE_ID = MAGEID;
    CHANCE = (SELECT RANDOM() * 10) + (SELECT POWER_LVL FROM MAGE WHERE MAGE_ID = MAGEID); 
    IF (CHANCE > 90) THEN
        INSERT INTO DEVIL(PREV_MAGE, NAME) VALUES (MAGEID, NEW_NAME);
        NEW_DEVIL = (SELECT DEVIL_ID FROM DEVIL ORDER BY DEVIL_ID DESC LIMIT 1);
        INSERT INTO TEST(MAGE_ID, DEVIL_ID, RESULT) VALUES (MAGEID, NEW_DEVIL, TRUE);
    ELSE 
        UPDATE MAGE SET ALIVE = FALSE WHERE MAGE_ID = MAGEID;
		NEW_LOCALE = (SELECT LOCALE_ID FROM LOCATION WHERE LOC_NAME = 'Hell');
		INSERT INTO TEST(MAGE_ID, DEVIL_ID, RESULT) VALUES (MAGEID, NEW_DEVIL, FALSE);
		UPDATE MAGE SET LOCALE_ID = NEW_LOCALE WHERE MAGE_ID = MAGEID;
    END IF;
END;
$$
    LANGUAGE PLPGSQL;
	
CREATE OR REPLACE FUNCTION count_residents(LOC SMALLINT) RETURNS VOID AS
$$
DECLARE
	RESIDENTS INTEGER;
BEGIN
	RESIDENTS = (SELECT COUNT(MAGE_ID) FROM MAGE WHERE MAGE.LOCALE_ID = LOC and MAGE.ALIVE = true GROUP BY MAGE_ID) +
				(SELECT COUNT(HUMAN_ID) FROM HUMAN WHERE HUMAN.LOCALE_ID = LOC and HUMAN.ALIVE = true GROUP BY HUMAN_ID) +
				(SELECT COUNT(DEVIL_ID) FROM DEVIL WHERE DEVIL.LOCALE_ID = LOC GROUP BY DEVIL_ID);
	UPDATE LOC SET POPULATION = RESIDENTS;
END;
$$
    LANGUAGE PLPGSQL;



-------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION mage_in_train_func() RETURNS TRIGGER AS
$$
DECLARE
    IS_IN_TRAINING INTEGER;
BEGIN
    IS_IN_TRAINING = (SELECT COUNT(SIDEKICK) FROM TRAINING WHERE SIDEKICK = NEW.EFFECT_FROM GROUP BY SIDEKICK) 
                    + (SELECT COUNT(LEAD_MAGE) FROM TRAINING WHERE LEAD_MAGE = NEW.EFFECT_FROM GROUP BY LEAD_MAGE);
    IF (IS_IN_TRAINING = 0) THEN 
        RAISE EXCEPTION 'No mages were involed in the effect casting.';
		RETURN NULL;
    END IF;
	RETURN NEW;
END;
$$
    LANGUAGE PLPGSQL;

CREATE TRIGGER IS_MAGE_IN_THIS_TRAINING
    BEFORE UPDATE OF EFFECT
    ON HUMAN
	FOR EACH ROW
EXECUTE PROCEDURE mage_in_train_func();


CREATE OR REPLACE FUNCTION mage_dead() RETURNS TRIGGER AS
$$
DECLARE
    OLD_LOC SMALLINT;
	NEW_LOC SMALLINT;
BEGIN
    IF (NOT(SELECT ALIVE FROM MAGE WHERE ALIVE = FALSE AND OLD.ALIVE = TRUE LIMIT 1)) THEN
        OLD_LOC = (SELECT LOCALE_ID FROM MAGE WHERE ALIVE = FALSE AND OLD.ALIVE = TRUE LIMIT 1);
		NEW_LOC = (SELECT LOCALE_ID FROM LOCATION WHERE LOC_NAME = 'Hell');
		UPDATE LOCATION SET POPULATION = POPULATION - 1 WHERE LOCALE_ID = OLD_LOC;
		UPDATE LOCATION SET POPULATION = POPULATION + 1 WHERE LOCALE_ID = NEW_LOC;
		RETURN NEW;
	END IF;
	IF ((SELECT ALIVE FROM MAGE WHERE ALIVE = TRUE AND OLD.ALIVE = FALSE LIMIT 1)) THEN
        OLD_LOC = (SELECT LOCALE_ID FROM LOCATION WHERE LOC_NAME = 'Hell');
		NEW_LOC = (SELECT LOCALE_ID FROM LOCATION WHERE LOC_NAME = 'Mage Realm');
		UPDATE LOCATION SET POPULATION = POPULATION - 1 WHERE LOCALE_ID = OLD_LOC;
		UPDATE LOCATION SET POPULATION = POPULATION + 1 WHERE LOCALE_ID = NEW_LOC;
		UPDATE MAGE SET LOCALE_ID = NEW_LOC WHERE ALIVE = TRUE AND OLD.ALIVE = FALSE;
		RETURN NEW;
    END IF;
	RETURN NULL;
END;
$$
    LANGUAGE PLPGSQL;

CREATE TRIGGER MAGE_DEAD_TRIGGER
    AFTER UPDATE OF ALIVE
    ON MAGE
	FOR EACH ROW
EXECUTE PROCEDURE mage_dead();

CREATE OR REPLACE FUNCTION human_dead() RETURNS TRIGGER AS
$$
DECLARE
    OLD_LOC SMALLINT;
BEGIN
    IF (NOT(SELECT ALIVE FROM HUMAN WHERE ALIVE = FALSE AND OLD.ALIVE = TRUE LIMIT 1)) THEN
        OLD_LOC = (SELECT LOCALE_ID FROM HUMAN WHERE ALIVE = FALSE AND OLD.ALIVE = TRUE LIMIT 1);
		UPDATE LOCATION SET POPULATION = POPULATION - 1 WHERE LOCALE_ID = OLD_LOC;
		RETURN NEW;
    END IF;
	IF ((SELECT ALIVE FROM HUMAN WHERE ALIVE = TRUE AND OLD.ALIVE = FALSE LIMIT 1)) THEN
        OLD_LOC = (SELECT LOCALE_ID FROM HUMAN WHERE ALIVE = TRUE AND OLD.ALIVE = FALSE LIMIT 1);
		UPDATE LOCATION SET POPULATION = POPULATION + 1 WHERE LOCALE_ID = OLD_LOC;
		RETURN NEW;
    END IF;
	RETURN NULL;
END;
$$
    LANGUAGE PLPGSQL;

CREATE TRIGGER HUMAN_DEAD_TRIGGER
    AFTER UPDATE OF ALIVE
    ON HUMAN
	FOR EACH ROW
EXECUTE PROCEDURE human_dead();
